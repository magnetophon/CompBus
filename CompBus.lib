declare name 		"CompBus";
declare version 	"1.1.3";
declare author 		"Bart Brouns";
declare license 	"AGPL-3.0-only";
declare copyright 	"(c) Bart Brouns 2023";

import("stdfaust.lib");

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// What is this?
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This is a group of sidechain-compressors all mixed together. The sidechain is connected to the output.
// see process=CompBusMono; for a visual explanation.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  user interface
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

meter_group(x)  = (vgroup("[1]", x));
knob_group(x)  = (vgroup("[2]", x));

ratio = knob_group(vslider("[1]ratio[unit::1]", 20, 1, 20 , 0.1));
thresh =  knob_group(vslider("[2]thres[unit: dB]", 0, -70, 0 , 0.1));
att =  knob_group(vslider("[3]att[unit: s]", 0, 0, 0.1 , 0.001));
rel =  knob_group(vslider("[4]rel[unit: s]", 0.1, 0.01, 1 , 0.001));

envelop	= abs : max ~ -(1.0/ma.SR) : max(ba.db2linear(-70)) : ba.linear2db;

meter = (_<:(_, (envelop :(vbargraph("[3][unit:dB][tooltip: input level in dB]", -70, +6)))):attach);
multimeter =  meter_group(hgroup("[1]",par(i,ChanPerComp,_<:(_, (envelop :(vbargraph("[unit:dB][tooltip: input level in dB]", -70, +6)))):attach)));

InMeter=si.bus(ChanPerComp*NrCompressors)<:(si.bus(ChanPerComp*NrCompressors)<:si.bus(ChanPerComp*NrCompressors*2):(InMetRoutInput,InMet):ro.interleave(ChanPerComp,2):par(i,ChanPerComp,attach)),InMetRoutOutput:>si.bus(ChanPerComp*NrCompressors)
with {
	InMet= si.bus(ChanPerComp*(NrCompressors)):> meter_group(vgroup("In:",par(i,ChanPerComp,envelop :(hbargraph("[unit:dB][tooltip: input level in dB]", -70, +6)) )));
	InMetRoutInput=si.bus(ChanPerComp),par(i,ChanPerComp*(NrCompressors-1),!) ;
	//met=(InMetRoutInput,InMet):ro.interleave(ChanPerComp,2):par(i,ChanPerComp,attach);
	InMetRoutOutput= par(i,ChanPerComp,!),si.bus(ChanPerComp*(NrCompressors-1)) ;
	//me= (si.bus(ChanPerComp*NrCompressors)<:si.bus(ChanPerComp*NrCompressors*2):(InMetRoutInput,InMet):ro.interleave(ChanPerComp,2):par(i,ChanPerComp,attach));
};

OutMeter =  meter_group(vgroup("Out:",par(i,ChanPerComp,_<:(_, (envelop :(hbargraph("[2][unit:dB][tooltip: output level in dB]", -70, +6)))):attach)));

//GR 		=  (ba.linear2db : meter_group(vbargraph("[2] GR [unit:dB] [tooltip: Gain reduction in dB]",  -30,0)));
displayGR 	= _<:_,(ba.linear2db : meter_group(vbargraph("[4] GR [unit:dB] [tooltip: Gain reduction in dB]",  -30,0))) : attach;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  compute the gain
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

gaincomp(x) = co.compression_gain_mono(ratio,thresh,att,rel,x);
//gaincomp_stereo = min(gaincomp,gaincomp) ;
gaincomp_multi(Nr) = par(i,Nr, co.compression_gain_mono(ratio,thresh,att,rel,_)): seq(j,(log(Nr)/log(2)),par(k,Nr/(2:pow(j+1)),min));

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   compressor building blocks
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// a feedback compressor
//FBcomp =_*_~gaincomp(_);

//a mono sidechain compressor
SidechainCompressor(v) 	= hgroup("Ch %v", hgroup("",(gaincomp(_):displayGR)*meter));
//StereoComp(v) 	= vgroup("Ch %v",_,_<:gaincomp_stereo*_,gaincomp_stereo*_);
//SC(Nr)=par(i,Nr*2,_): (gaincomp_multi(Nr):displayGR<:par(i,Nr,_)),multimeter : ro.interleave(Nr,2): par(i,Nr,*);
SCcomp(Nr) 	= hgroup("",par(i,Nr*2,_): (gaincomp_multi(Nr):displayGR<:par(i,Nr,_)),multimeter : ro.interleave(Nr,2): par(i,Nr,*));
SidechainComp(Nr) 	= hgroup("[1]MasterFB",par(i,Nr*2,_): (gaincomp_multi(Nr):displayGR<:par(i,Nr,_)),multimeter : ro.interleave(Nr,2): par(i,Nr,*)); //identical to SCcomp except for the caption

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  StereoRouting
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// the number of in and outputs
inputNr= (NrCompressors*ChanPerComp); // total nr of inputs
totalNr= (ChanPerComp+inputNr); // total nr of inputs, including the feedback
outputNr= inputNr*2; //nr of outputs of the router, including a SC for each compressor

Zero(Nr)=  par(i,Nr,0); //nake (Nr) outputs  that output nothing

//make it pair up the feedback input with the audio inputs of multirouting, mono version
routing=  (si.bus(1+NrCompressors))  <: par(j,NrCompressors,(_,ba.selector(j,NrCompressors)));

// select first ChanPerComp inputs from ((NrCompressors*ChanPerComp)+ChanPerComp)
SideChain(ChNr) = si.bus(totalNr)<:Zero(ChNr*2*ChanPerComp),par(i,ChanPerComp,ba.selector(i,totalNr)),Zero(outputNr-(ChNr*2*ChanPerComp)-ChanPerComp);
//exception, needed cause par(i,0,something) doesn't work
FirstSideChain =si.bus(totalNr)<:par(i,ChanPerComp,ba.selector(i,totalNr)),Zero(outputNr-ChanPerComp);
//Connect all SideChains
AllSC = si.bus(totalNr)<:FirstSideChain,par(i,NrCompressors-1,SideChain(i+1)):>si.bus(outputNr);
// select audio si.bus(totalNr):
audio(ChNr)=  par(i,ChanPerComp,!) , (si.bus(inputNr)<:par(i,ChanPerComp,ba.selector(i+ChanPerComp*ChNr,inputNr)));
//connect all the audio
AllAudio = si.bus(totalNr)<:par(i,NrCompressors,Zero(ChanPerComp),audio(i));

//and the complete routing
MultiRouting= si.bus(totalNr)<: AllSC, AllAudio:>si.bus(outputNr);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  the complete CompBus
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
CompBusMono = ((routing:(hgroup("CompBus", par(i, NrCompressors, SidechainCompressor(i+1)):>_ )))~_) ;

FBcomp= (  hgroup("[2]FBcomp",SCcomp(ChanPerComp))   ) ~ si.bus(ChanPerComp) ;
FFcomp= hgroup("[2]FFcomp",si.bus(ChanPerComp)<:(  par(i,ChanPerComp*2,_): (gaincomp_multi(ChanPerComp):displayGR<:par(i,ChanPerComp,_)),multimeter : ro.interleave(ChanPerComp,2): par(i,ChanPerComp,*)   ) );

SCFB(Nr)=hgroup("[1]MasterSC",(( (ro.interleave(Nr,2):par(i,Nr,*):gaincomp_multi(Nr):displayGR<:par(i,Nr,_)),multimeter)~(si.bus(Nr)) : ro.interleave(Nr,2): par(i,Nr,*)));
SCFBplusFF(Ch)= hgroup("Ch %Ch [Ch]",hgroup("",SCFB(ChanPerComp):FFcomp));
SCplusFF(Ch)= hgroup("Ch %Ch [Ch]",hgroup("",SidechainComp(ChanPerComp):FFcomp));

CompBus=InMeter: (  hgroup("", MultiRouting:(par(i,NrCompressors, SCplusFF(i+1)):>si.bus(ChanPerComp) )) )  ~  OutMeter ;
